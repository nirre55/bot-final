#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour mettre √† jour balance_max apr√®s ajout de capital
"""
import sys
import os
import json
from datetime import datetime

if sys.platform == 'win32':
    os.system('chcp 65001 > nul')
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')  # type: ignore

sys.path.insert(0, r'C:\Users\Oulmi\OneDrive\Bureau\DEV\bot-final')

from api.binance_client import BinanceAPIClient

def update_balance_max():
    """Met √† jour balance_max avec la balance actuelle apr√®s d√©p√¥t"""

    # R√©cup√©rer la balance actuelle
    client = BinanceAPIClient()
    balance = client.get_account_balance()

    if not balance:
        print("‚ùå Impossible de r√©cup√©rer la balance")
        return

    # Trouver balance USDC
    current_balance = 0.0
    for b in balance:
        if b.get('asset') == 'USDC':
            current_balance = float(b.get("availableBalance", 0))
            break

    if current_balance == 0:
        print("‚ùå Balance USDC non trouv√©e")
        return

    # Lire le fichier JSON actuel
    recovery_file = "loss_recovery.json"

    if os.path.exists(recovery_file):
        with open(recovery_file, 'r') as f:
            data = json.load(f)
            old_balance_max = float(data.get("balance_max", 0))
            recovery_amount = float(data.get("recovery_amount", 0))
    else:
        old_balance_max = 0
        recovery_amount = 0

    print("=" * 80)
    print("MISE √Ä JOUR BALANCE MAX APR√àS D√âP√îT")
    print("=" * 80)
    print(f"\nüìä √âtat actuel:")
    print(f"   Balance actuelle: {current_balance:.4f} USDC")
    print(f"   Balance max (ancien): {old_balance_max:.4f} USDC")
    print(f"   Recovery actif: {recovery_amount:.4f} USDC")

    # Calculer la diff√©rence
    difference = current_balance - old_balance_max

    if difference > 0:
        print(f"\nüí∞ D√âP√îT D√âTECT√â: +{difference:.4f} USDC")
        print(f"   ‚Üí Mise √† jour balance_max: {old_balance_max:.4f} ‚Üí {current_balance:.4f} USDC")

        # Demander confirmation
        response = input(f"\n‚ùì Confirmer la mise √† jour de balance_max √† {current_balance:.4f} USDC? (oui/non): ")

        if response.lower() in ['oui', 'o', 'yes', 'y']:
            # Mettre √† jour le fichier
            new_data = {
                "recovery_amount": 0.0,  # Reset recovery apr√®s d√©p√¥t
                "balance_max": current_balance,
                "timestamp": datetime.now().isoformat()
            }

            with open(recovery_file, 'w') as f:
                json.dump(new_data, f, indent=2)

            print(f"\n‚úÖ Balance_max mise √† jour: {current_balance:.4f} USDC")
            print(f"‚úÖ Recovery reset √† 0.0 USDC (nouveau capital)")
            print(f"üíæ Fichier sauvegard√©: {recovery_file}")
        else:
            print("\n‚ùå Mise √† jour annul√©e")

    elif difference == 0:
        print(f"\n‚ûñ Aucun changement d√©tect√©")
        print(f"   Balance actuelle = Balance max = {current_balance:.4f} USDC")

    else:
        print(f"\n‚ö†Ô∏è PERTE D√âTECT√âE: {difference:.4f} USDC")
        print(f"   La balance actuelle est inf√©rieure √† balance_max")
        print(f"   ‚Üí Pas de mise √† jour (utiliser le syst√®me de recovery normal)")

if __name__ == "__main__":
    update_balance_max()
