"""
Service de cascade trading
Responsabilit√© unique : Gestion du syst√®me de cascade avec alternance LONG/SHORT
"""
import asyncio
import time
from typing import Dict, Optional, Any, List
from enum import Enum
from decimal import Decimal, ROUND_DOWN

import config
from api.binance_client import BinanceAPIClient
from core.logger import get_module_logger


class CascadeState(Enum):
    """√âtats possibles du syst√®me de cascade"""
    INACTIVE = "inactive"  # Pas de cascade active
    WAITING_HEDGE = "waiting_hedge"  # Attente ex√©cution hedge initial
    ACTIVE = "active"  # Cascade active avec ordres en attente
    STOPPED = "stopped"  # Cascade arr√™t√©e (limite atteinte ou erreur)


class CascadeService:
    """Service de gestion du syst√®me de cascade trading"""
    
    def __init__(self, binance_client: BinanceAPIClient, tp_service=None) -> None:
        """Initialise le service cascade"""
        self.logger = get_module_logger("CascadeService")
        self.binance_client = binance_client
        self.tp_service = tp_service
        self.trading_service = None  # R√©f√©rence pour formatage dynamique
        
        # √âtat du syst√®me cascade
        self.state: CascadeState = CascadeState.INACTIVE
        
        # Prix de r√©f√©rence (d√©finis lors du trade initial + hedge)
        self.initial_long_price: Optional[float] = None
        self.initial_short_price: Optional[float] = None
        
        # Quantit√©s cumulatives des positions
        self.current_long_quantity: float = 0.0
        self.current_short_quantity: float = 0.0
        
        # Compteur d'ordres cascade cr√©√©s
        self.cascade_orders_count: int = 0
        
        # Liste des ordres cascade en attente
        self.pending_orders: List[Dict[str, Any]] = []
        
        # Ordre hedge initial √† surveiller
        self.initial_hedge_order: Optional[Dict[str, Any]] = None
        
        # Informations de l'ordre initial pour r√©cup√©ration du prix
        self.initial_order_info: Optional[Dict[str, Any]] = None
        
        # Cache des informations de formatage pour √©viter appels r√©p√©t√©s
        self._symbol_precision_cache: Optional[Dict[str, Any]] = None
        self._cached_symbol: Optional[str] = None
        
        self.logger.debug("CascadeService initialis√©")
    
    def handle_order_execution_from_websocket(self, execution_data: Dict[str, Any]) -> None:
        """
        G√®re les ex√©cutions d'ordres re√ßues via WebSocket User Data Stream
        
        Args:
            execution_data: Donn√©es d'ex√©cution du WebSocket
        """
        self.logger.debug("handle_order_execution_from_websocket called")
        
        try:
            order_id = str(execution_data.get("i"))  # Order ID
            symbol = execution_data.get("s")         # Symbol
            side = execution_data.get("S")           # Side (BUY/SELL)
            executed_qty = float(execution_data.get("z", "0"))  # Executed quantity (cumulative)
            execution_price = float(execution_data.get("L", "0"))  # Last executed price
            order_status = execution_data.get("X", "UNKNOWN")  # Order status
            position_side = execution_data.get("ps", "BOTH")  # Position side
            
            self.logger.info(f"üì® WebSocket: Ordre {order_status} {symbol} {side} {executed_qty} @ {execution_price} ID:{order_id}")
            self.logger.info(f"üéØ √âtat cascade actuel: {self.state}, Hedge order: {self.initial_hedge_order}")
            
            # V√©rifier si c'est notre symbole
            if symbol != config.SYMBOL:
                self.logger.debug(f"Ordre non concern√© (symbole diff√©rent): {symbol}")
                return
                
            # Ne traiter que les ordres FILLED
            if order_status != "FILLED":
                self.logger.debug(f"Ordre non FILLED ignor√©: {order_status} ID:{order_id}")
                return
            
            # V√©rifier que les donn√©es critiques ne sont pas None
            if not side or executed_qty is None or execution_price is None:
                self.logger.error(f"Donn√©es d'ex√©cution incompl√®tes: side={side}, qty={executed_qty}, price={execution_price}")
                return
            
            # Traiter selon le type d'ordre
            if self._is_hedge_order(order_id):
                self.logger.info("üéØ Ordre hedge initial d√©tect√© - Traitement en cours...")
                self.logger.info(f"State cascade: {self.state}")
                self.logger.info(f"Hedge order d√©fini: {self.initial_hedge_order}")
                
                # Traitement imm√©diat du hedge en mode async
                asyncio.create_task(self._process_hedge_execution_async(side, executed_qty, execution_price))
                
            elif self._is_cascade_order(order_id):
                self.logger.info("üîÑ Ordre cascade d√©tect√©")
                
                # Traitement imm√©diat du cascade en mode async
                asyncio.create_task(self._process_cascade_execution_async(side, executed_qty, execution_price, order_id))
                
            else:
                self.logger.info(f"‚ùì Ordre non suivi par le syst√®me cascade: {order_id}")
                self.logger.info(f"üìä √âtat cascade: {self.state}")
                self.logger.info(f"üìã Hedge order: {self.initial_hedge_order}")
                self.logger.info(f"üìã Pending orders count: {len(self.pending_orders)}")
                
        except Exception as e:
            self.logger.error(f"Erreur lors du traitement ex√©cution WebSocket: {e}", exc_info=True)
    
    def set_trading_service_reference(self, trading_service) -> None:
        """
        D√©finit la r√©f√©rence au TradingService apr√®s initialisation
        
        Args:
            trading_service: Instance du TradingService pour formatage dynamique
        """
        self.trading_service = trading_service
        self.logger.debug("R√©f√©rence TradingService d√©finie dans CascadeService")
        
        # Pr√©charger le cache de pr√©cision pour le symbole actuel
        self._cache_symbol_precision()
    
    def is_cascade_active(self) -> bool:
        """
        V√©rifie si une cascade est active
        
        Returns:
            True si cascade active, False sinon
        """
        return self.state in [CascadeState.WAITING_HEDGE, CascadeState.ACTIVE]
    
    def start_cascade(
        self, 
        initial_order: Dict[str, Any], 
        hedge_order: Dict[str, Any]
    ) -> None:
        """
        D√©marre une nouvelle cascade avec le trade initial et son hedge
        
        Args:
            initial_order: R√©sultat de l'ordre initial (signal)
            hedge_order: R√©sultat de l'ordre hedge
        """
        self.logger.debug("start_cascade called")
        
        if not config.CASCADE_CONFIG["ENABLED"]:
            self.logger.info("Syst√®me cascade d√©sactiv√© dans la configuration")
            return
        
        if self.is_cascade_active():
            self.logger.warning("Cascade d√©j√† active - ignor√©")
            return
        
        try:
            # R√©initialiser l'√©tat
            self._reset_cascade_state()
            
            # Stocker les IDs d'ordres pour r√©cup√©ration ult√©rieure des prix
            initial_order_id = initial_order.get("orderId")
            initial_side = initial_order.get("side", "").upper()
            
            hedge_order_id = hedge_order.get("orderId")
            hedge_side = hedge_order.get("side", "").upper()
            
            self.logger.info(f"Cascade d√©marr√©e - Initial: {initial_side} ID:{initial_order_id}, Hedge: {hedge_side} ID:{hedge_order_id}")
            
            # Stocker les informations pour r√©cup√©ration des prix apr√®s ex√©cution
            self.initial_order_info = {
                "id": initial_order_id,
                "side": initial_side,
                "symbol": config.SYMBOL
            }
            
            # Stocker l'ordre hedge √† surveiller
            self.initial_hedge_order = hedge_order
            
            # D√©marrer en mode attente hedge
            self.state = CascadeState.WAITING_HEDGE
            
            self.logger.info("‚úÖ Cascade initialis√©e - En attente d'ex√©cution via WebSocket")
            self.logger.info(f"üîÑ Prix de r√©f√©rence: LONG={self.initial_long_price}, SHORT={self.initial_short_price}")
            self.logger.info(f"Positions: LONG={self.current_long_quantity}, SHORT={self.current_short_quantity}")
            
        except Exception as e:
            self.logger.error(f"Erreur lors du d√©marrage cascade: {e}", exc_info=True)
            self._reset_cascade_state()
    
    def _reset_cascade_state(self) -> None:
        """Remet √† z√©ro l'√©tat de la cascade"""
        self.logger.debug("_reset_cascade_state called")
        
        self.state = CascadeState.INACTIVE
        self.initial_long_price = None
        self.initial_short_price = None
        self.current_long_quantity = 0.0
        self.current_short_quantity = 0.0
        self.cascade_orders_count = 0
        self.pending_orders.clear()
        self.initial_hedge_order = None
        self.initial_order_info = None
        
        self.logger.info("√âtat cascade r√©initialis√©")
    
    async def _retrieve_initial_order_price_async(self) -> None:
        """R√©cup√®re le prix d'ex√©cution de l'ordre initial (version async)"""
        if not self.initial_order_info:
            return

        # V√©rifier si les prix sont d√©j√† d√©finis
        order_side = self.initial_order_info.get("side")
        if order_side == "BUY" and self.initial_long_price is not None:
            return  # Prix LONG d√©j√† d√©fini
        elif order_side == "SELL" and self.initial_short_price is not None:
            return  # Prix SHORT d√©j√† d√©fini

        try:
            order_id = self.initial_order_info.get("id")
            symbol = self.initial_order_info.get("symbol")

            if not order_id or not symbol:
                self.logger.error("Informations ordre initial manquantes")
                return

            # R√©cup√©rer le statut de l'ordre initial
            order_status = self.binance_client.get_order_status(symbol, int(order_id))

            if order_status and order_status.get("status") == "FILLED":
                executed_price = float(order_status.get("avgPrice", "0"))
                executed_qty = float(order_status.get("executedQty", "0"))

                self.logger.info(f"‚úÖ Prix ordre initial r√©cup√©r√©: {order_side} {executed_qty} @ {executed_price}")

                # D√©finir le prix et la quantit√© selon le c√¥t√©
                if order_side == "BUY":
                    self.initial_long_price = executed_price
                    self.current_long_quantity = executed_qty
                    self.logger.info(f"Prix LONG initial d√©fini via API: {executed_price}")
                else:
                    self.initial_short_price = executed_price
                    self.current_short_quantity = executed_qty
                    self.logger.info(f"Prix SHORT initial d√©fini via API: {executed_price}")

        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration du prix initial: {e}", exc_info=True)
    
    def _update_tp_after_cascade(self, executed_side: str) -> None:
        """
        Met √† jour TOUS les TP actifs avec +0.1% apr√®s l'ex√©cution d'un ordre cascade
        
        Args:
            executed_side: C√¥t√© de l'ordre cascade ex√©cut√© (BUY ou SELL)
        """
        self.logger.debug(f"_update_tp_after_cascade called: {executed_side}")
        
        if not self.tp_service:
            self.logger.debug("Service TP non disponible")
            return
        
        try:
            from core.tp_service import TPSide
            
            self.logger.info(f"üîÑ Cascade {executed_side} ex√©cut√©e - Mise √† jour TOUS les TP avec +0.1%")
            
            # Mettre √† jour TP LONG s'il existe et qu'on a une position LONG
            if self.current_long_quantity > 0:
                success_long = self.tp_service.create_or_update_tp(
                    side=TPSide.LONG,
                    quantity=self.current_long_quantity,
                    is_initial=False  # False = avec incr√©ment +0.1%
                )
                
                if success_long:
                    self.logger.info(f"‚úÖ TP LONG mis √† jour avec +0.1% apr√®s cascade (quantit√©: {self.current_long_quantity})")
                else:
                    self.logger.warning(f"‚ö†Ô∏è √âchec mise √† jour TP LONG apr√®s cascade")
            
            # Mettre √† jour TP SHORT s'il existe et qu'on a une position SHORT
            if self.current_short_quantity > 0:
                success_short = self.tp_service.create_or_update_tp(
                    side=TPSide.SHORT,
                    quantity=self.current_short_quantity,
                    is_initial=False  # False = avec d√©cr√©mentation -0.1%
                )
                
                if success_short:
                    self.logger.info(f"‚úÖ TP SHORT mis √† jour avec -0.1% apr√®s cascade (quantit√©: {self.current_short_quantity})")
                else:
                    self.logger.warning(f"‚ö†Ô∏è √âchec mise √† jour TP SHORT apr√®s cascade")
                
        except Exception as e:
            self.logger.error(f"Erreur lors de la mise √† jour TP apr√®s cascade: {e}", exc_info=True)
    
    def _create_tp_for_hedge_execution(self, side: str, quantity: float) -> None:
        """
        Met √† jour les TP quand le hedge s'ex√©cute : TP existant +0.1% et nouveau TP hedge
        
        Args:
            side: C√¥t√© de l'ordre hedge ex√©cut√© (BUY ou SELL)
            quantity: Quantit√© de l'ordre hedge ex√©cut√©
        """
        self.logger.debug(f"_create_tp_for_hedge_execution called: {side} {quantity}")
        
        if not self.tp_service:
            self.logger.debug("Service TP non disponible")
            return
        
        try:
            from core.tp_service import TPSide
            
            self.logger.info(f"üîÑ Hedge {side} ex√©cut√© - Mise √† jour TP avec increment +0.1%")
            
            if side == "BUY":
                # Hedge BUY ex√©cut√© ‚Üí position LONG augment√©e
                existing_tp_side = TPSide.SHORT  # TP existant (si on avait SHORT initial)
                new_tp_side = TPSide.LONG        # Nouveau TP pour position LONG du hedge
                existing_quantity = self.current_short_quantity
                new_quantity = self.current_long_quantity
                
            else:
                # Hedge SELL ex√©cut√© ‚Üí position SHORT augment√©e  
                existing_tp_side = TPSide.LONG   # TP existant (si on avait LONG initial)
                new_tp_side = TPSide.SHORT       # Nouveau TP pour position SHORT du hedge
                existing_quantity = self.current_long_quantity
                new_quantity = self.current_short_quantity
            
            # 1. Mettre √† jour le TP existant avec +0.1% (incr√©ment)
            if existing_quantity > 0:
                success_existing = self.tp_service.create_or_update_tp(
                    side=existing_tp_side,
                    quantity=existing_quantity,
                    is_initial=False  # False = avec incr√©ment +0.1%
                )
                
                if success_existing:
                    self.logger.info(f"‚úÖ TP {existing_tp_side.value} existant mis √† jour avec +0.1% (quantit√©: {existing_quantity})")
                else:
                    self.logger.warning(f"‚ö†Ô∏è √âchec mise √† jour TP {existing_tp_side.value} existant")
            
            # 2. Cr√©er TP pour le nouveau c√¥t√© hedge avec -0.1% 
            if new_quantity > 0:
                success_new = self.tp_service.create_or_update_tp(
                    side=new_tp_side,
                    quantity=new_quantity,
                    is_initial=False  # False = avec d√©cr√©mentation -0.1% pour le c√¥t√© oppos√©
                )
                
                if success_new:
                    self.logger.info(f"‚úÖ TP {new_tp_side.value} cr√©√© pour hedge avec -0.1% (quantit√©: {new_quantity})")
                else:
                    self.logger.warning(f"‚ö†Ô∏è √âchec cr√©ation TP {new_tp_side.value} pour hedge")
                
        except Exception as e:
            self.logger.error(f"Erreur lors de la mise √† jour TP pour hedge: {e}", exc_info=True)
    
    async def _create_next_cascade_order(self) -> None:
        """Cr√©e le prochain ordre cascade selon la logique d'alternance"""
        self.logger.debug("_create_next_cascade_order called")
        
        try:
            # D√©terminer quel type d'ordre cr√©er (alternance)
            if self.current_long_quantity > self.current_short_quantity:
                # Plus de LONG ‚Üí Cr√©er SHORT
                next_side = "SELL"
                next_position_side = "SHORT"
                stop_price = self.initial_short_price
                # Quantit√© = 2 * current_long_quantity - current_short_quantity
                next_quantity = (2 * self.current_long_quantity) - self.current_short_quantity
            else:
                # Plus de SHORT ‚Üí Cr√©er LONG
                next_side = "BUY"
                next_position_side = "LONG"
                stop_price = self.initial_long_price
                # Quantit√© = 2 * current_short_quantity - current_long_quantity
                next_quantity = (2 * self.current_short_quantity) - self.current_long_quantity
            
            
            if next_quantity <= 0:
                self.logger.error(f"Quantit√© cascade invalide: {next_quantity}")
                return
            
            # V√©rifier que stop_price est valide
            if stop_price is None or stop_price <= 0:
                self.logger.error(f"Prix de stop invalide: {stop_price}")
                self.logger.error("Les prix de r√©f√©rence ne sont pas correctement initialis√©s")
                return
            
            # Formater la quantit√© selon les r√®gles du symbole
            formatted_quantity = self._format_cascade_quantity(next_quantity)
            
            if not formatted_quantity:
                self.logger.error("Impossible de formater la quantit√© cascade")
                return
            
            # Formater le prix selon les r√®gles du symbole
            formatted_stop_price = self._format_cascade_price(stop_price)
            
            # Cr√©er l'ordre STOP_MARKET
            self.logger.info(f"üìã Cr√©ation ordre cascade: {next_side} {formatted_quantity} @ {formatted_stop_price}")
            
            cascade_order = self.binance_client.place_stop_market_order(
                symbol=config.SYMBOL,
                side=next_side,
                quantity=formatted_quantity,
                stop_price=formatted_stop_price,  # Utiliser prix format√©
                position_side=next_position_side
            )
            
            if cascade_order:
                # Ajouter √† la liste des ordres en attente
                self.pending_orders.append(cascade_order)
                self.cascade_orders_count += 1
                
                self.logger.info(f"‚úÖ Ordre cascade cr√©√© - ID: {cascade_order.get('orderId')}")
            else:
                self.logger.error("‚ùå √âchec de cr√©ation de l'ordre cascade")
                self._handle_cascade_order_failure(next_side, formatted_quantity, stop_price)
                
        except Exception as e:
            self.logger.error(f"Erreur lors de la cr√©ation de l'ordre cascade: {e}", exc_info=True)
    
    def _handle_cascade_order_failure(self, side: str, quantity: str, stop_price: float) -> None:
        """
        G√®re les √©checs de cr√©ation d'ordres cascade - Arr√™te juste les cascades sans reset complet
        
        Args:
            side: C√¥t√© de l'ordre (BUY/SELL)
            quantity: Quantit√© format√©e
            stop_price: Prix de stop utilis√©
        """
        self.logger.debug(f"_handle_cascade_order_failure called: {side} {quantity} @ {stop_price}")
        self.logger.warning(f"‚ö†Ô∏è √âchec cr√©ation ordre cascade {side} - Arr√™t des cascades uniquement")
        
        # Ajouter des m√©triques pour debugging
        self.logger.info(f"√âtat au moment de l'√©chec:")
        self.logger.info(f"  Ordres cr√©√©s: {self.cascade_orders_count}/{config.CASCADE_CONFIG['MAX_ORDERS']}")
        self.logger.info(f"  Positions: LONG={self.current_long_quantity} SHORT={self.current_short_quantity}")
        self.logger.info(f"  Prix r√©f√©rences: LONG={self.initial_long_price} SHORT={self.initial_short_price}")
        
        # Simplement arr√™ter la cascade - LES POSITIONS ET TP RESTENT ACTIFS
        self.state = CascadeState.STOPPED
        
        self.logger.info("üîÑ Cascade arr√™t√©e - Positions et TP restent actifs pour atteindre les TP")
    
    def _cache_symbol_precision(self) -> None:
        """
        Met en cache les informations de pr√©cision pour √©viter appels r√©p√©t√©s
        """
        if not self.trading_service:
            return
            
        symbol = config.SYMBOL
        
        # V√©rifier si d√©j√† en cache pour ce symbole
        if self._cached_symbol == symbol and self._symbol_precision_cache:
            return
        
        self.logger.debug(f"Mise en cache des informations de pr√©cision pour {symbol}")
        
        # R√©cup√©rer et mettre en cache
        precision_info = self.trading_service.get_symbol_precision(symbol)
        if precision_info:
            self._symbol_precision_cache = precision_info
            self._cached_symbol = symbol
            
            tick_size = precision_info["price_filter"]["tick_size"]
            step_size = precision_info["lot_size"]["step_size"]
            
            self.logger.info(f"Cache formatage Cascade: tick_size={tick_size}, step_size={step_size}")
        else:
            self.logger.warning("Impossible de mettre en cache les informations de pr√©cision")
    
    def _format_cascade_quantity(self, quantity: float) -> Optional[str]:
        """
        Formate la quantit√© cascade avec cache optimis√©
        
        Args:
            quantity: Quantit√© √† formater
            
        Returns:
            Quantit√© format√©e ou None
        """
        self.logger.debug(f"_format_cascade_quantity called: {quantity}")
        
        try:
            # Utiliser le cache optimis√©
            if self._symbol_precision_cache and self.trading_service:
                step_size = self._symbol_precision_cache["lot_size"]["step_size"]
                formatted = self.trading_service._format_quantity(quantity, step_size)
                
                if float(formatted) <= 0:
                    return None
                return formatted
            
            # Fallback : formatage fixe
            formatted = f"{quantity:.3f}".rstrip('0').rstrip('.')
            
            if float(formatted) <= 0:
                return None
                
            return formatted
            
        except Exception as e:
            self.logger.error(f"Erreur formatage quantit√© cascade: {e}", exc_info=True)
            return None
    
    def _format_cascade_price(self, price: float) -> str:
        """
        Formate un prix avec cache optimis√©
        
        Args:
            price: Prix √† formater
            
        Returns:
            Prix format√©
        """
        self.logger.debug(f"_format_cascade_price called: {price}")
        
        try:
            # Utiliser le cache optimis√©
            if self._symbol_precision_cache and self.trading_service:
                tick_size = self._symbol_precision_cache["price_filter"]["tick_size"]
                return self.trading_service._format_price(price, tick_size)
            
            # Fallback : formatage fixe avec 2 d√©cimales
            return f"{price:.2f}"
            
        except Exception as e:
            self.logger.error(f"Erreur formatage prix cascade: {e}", exc_info=True)
            return f"{price:.2f}"
    
    def get_cascade_status(self) -> Dict[str, Any]:
        """
        Retourne l'√©tat actuel du syst√®me cascade
        
        Returns:
            Dictionnaire avec l'√©tat de la cascade
        """
        return {
            "state": self.state.value,
            "is_active": self.is_cascade_active(),
            "orders_count": self.cascade_orders_count,
            "max_orders": config.CASCADE_CONFIG["MAX_ORDERS"],
            "current_long_quantity": self.current_long_quantity,
            "current_short_quantity": self.current_short_quantity,
            "initial_long_price": self.initial_long_price,
            "initial_short_price": self.initial_short_price,
            "pending_orders_count": len(self.pending_orders)
        }
    
    def stop_cascade(self, reason: str = "Manual stop") -> None:
        """
        Arr√™te la cascade manuellement
        
        Args:
            reason: Raison de l'arr√™t
        """
        self.logger.info(f"Arr√™t cascade demand√©: {reason}")
        
        if self.is_cascade_active():
            self.state = CascadeState.STOPPED
            
            # Annuler les ordres en attente si n√©cessaire
            # TODO: Impl√©menter annulation des ordres
            
        self.logger.info("Cascade arr√™t√©e")
    
    def format_cascade_display(self) -> str:
        """
        Formate l'affichage de l'√©tat cascade
        
        Returns:
            Cha√Æne format√©e pour l'affichage
        """
        if not self.is_cascade_active():
            return ""
        
        status = self.get_cascade_status()
        
        if self.state == CascadeState.WAITING_HEDGE:
            return "CASCADE: üîÑ Attente ex√©cution hedge initial"
        elif self.state == CascadeState.ACTIVE:
            pending_info = f"En attente: {len(self.pending_orders)}" if self.pending_orders else ""
            return (f"CASCADE: üîÑ Actif ({status['orders_count']}/{status['max_orders']}) "
                   f"| LONG:{status['current_long_quantity']:.3f} "
                   f"SHORT:{status['current_short_quantity']:.3f} "
                   f"| {pending_info}")
        elif self.state == CascadeState.STOPPED:
            reason = "Limite atteinte" if status['orders_count'] >= status['max_orders'] else "Arr√™t√©"
            return f"CASCADE: üõë {reason} ({status['orders_count']}/{status['max_orders']})"
        
        return "CASCADE: ‚ùì √âtat inconnu"
    
    def _is_hedge_order(self, order_id: str) -> bool:
        """
        V√©rifie si un ordre ID correspond au hedge initial
        
        Args:
            order_id: ID de l'ordre √† v√©rifier
            
        Returns:
            True si c'est le hedge, False sinon
        """
        if not self.initial_hedge_order:
            self.logger.debug(f"‚ùå _is_hedge_order: pas de hedge initial d√©fini (order_id={order_id})")
            return False
        
        hedge_id = str(self.initial_hedge_order.get("orderId", ""))
        is_hedge = hedge_id == order_id
        
        self.logger.info(f"üîç _is_hedge_order: hedge_id={hedge_id}, order_id={order_id}, is_hedge={is_hedge}, state={self.state}")
        
        return is_hedge
    
    def _is_cascade_order(self, order_id: str) -> bool:
        """
        V√©rifie si un ordre ID correspond √† un ordre cascade
        
        Args:
            order_id: ID de l'ordre √† v√©rifier
            
        Returns:
            True si c'est un ordre cascade, False sinon
        """
        for order in self.pending_orders:
            if str(order.get("orderId", "")) == order_id:
                return True
        return False
    
    def _process_hedge_execution_sync(self, side: str, quantity: float, price: float) -> None:
        """
        Traite l'ex√©cution du hedge initial via WebSocket (version synchrone)
        
        Args:
            side: C√¥t√© de l'ordre (BUY/SELL)
            quantity: Quantit√© ex√©cut√©e
            price: Prix d'ex√©cution
        """
        try:
            self.logger.info(f"üéØ Traitement ex√©cution hedge WebSocket: {side} {quantity} @ {price}")
            
            # Mettre √† jour les prix et quantit√©s
            if side == "BUY":
                self.initial_long_price = price
                self.current_long_quantity += quantity
            else:
                self.initial_short_price = price
                self.current_short_quantity += quantity
            
            # Cr√©er/mettre √† jour les TP pour hedge
            if self.tp_service and config.TP_CONFIG["ENABLED"]:
                self._create_tp_for_hedge_execution(side, quantity)
            
            # Passer en mode cascade active
            self.state = CascadeState.ACTIVE
            self.initial_hedge_order = None
            
            # Cr√©er le premier ordre cascade (sera cr√©√© lors de la prochaine opportunit√© async)
            self.logger.info("üîÑ Cascade pr√™te - Premier ordre cascade sera cr√©√©")
            
            self.logger.info(f"‚úÖ Hedge trait√© via WebSocket - Cascade active")
            
        except Exception as e:
            self.logger.error(f"Erreur traitement hedge WebSocket: {e}", exc_info=True)
    
    async def _process_hedge_execution_async(self, side: str, quantity: float, price: float) -> None:
        """
        Traite l'ex√©cution du hedge initial via WebSocket (version async)
        
        Args:
            side: C√¥t√© de l'ordre (BUY/SELL)
            quantity: Quantit√© ex√©cut√©e
            price: Prix d'ex√©cution
        """
        try:
            self.logger.info(f"üéØ Traitement ex√©cution hedge WebSocket ASYNC: {side} {quantity} @ {price}")
            
            # R√©cup√©rer d'abord le prix de l'ordre initial si pas encore d√©fini
            await self._retrieve_initial_order_price_async()
            
            # Mettre √† jour les prix et quantit√©s du hedge
            if side == "BUY":
                # Hedge BUY ex√©cut√© ‚Üí d√©finir le prix LONG de r√©f√©rence 
                if self.initial_long_price is None:
                    self.initial_long_price = price
                    self.logger.info(f"Prix LONG hedge d√©fini: {price}")
                self.current_long_quantity += quantity
            else:
                # Hedge SELL ex√©cut√© ‚Üí d√©finir le prix SHORT de r√©f√©rence
                if self.initial_short_price is None:
                    self.initial_short_price = price
                    self.logger.info(f"Prix SHORT hedge d√©fini: {price}")
                self.current_short_quantity += quantity
            
            # Cr√©er/mettre √† jour les TP pour hedge
            if self.tp_service and config.TP_CONFIG["ENABLED"]:
                self._create_tp_for_hedge_execution(side, quantity)
                # Mettre √† jour TOUS les TP avec +0.1% apr√®s ex√©cution hedge
                self._update_tp_after_cascade(side)
            
            # Passer en mode cascade active
            self.state = CascadeState.ACTIVE
            self.initial_hedge_order = None
            
            # V√©rifier que les prix sont bien initialis√©s avant de cr√©er l'ordre cascade
            self.logger.info(f"üìä Prix avant cr√©ation cascade: LONG={self.initial_long_price}, SHORT={self.initial_short_price}")
            
            if self.initial_long_price is None or self.initial_short_price is None:
                self.logger.error("‚ùå Prix de r√©f√©rence manquants - impossible de cr√©er l'ordre cascade")
                self.logger.error(f"   LONG: {self.initial_long_price}, SHORT: {self.initial_short_price}")
                return
            
            # Cr√©er le premier ordre cascade imm√©diatement (version async)
            self.logger.info("üîÑ Cr√©ation du premier ordre cascade...")
            await self._create_next_cascade_order()
            
            self.logger.info(f"‚úÖ Hedge trait√© via WebSocket ASYNC - Cascade active avec premier ordre cr√©√©")
            
        except Exception as e:
            self.logger.error(f"Erreur traitement hedge WebSocket ASYNC: {e}", exc_info=True)
            
    def _process_cascade_execution_sync(self, side: str, quantity: float, price: float, order_id: str) -> None:
        """
        Traite l'ex√©cution d'un ordre cascade via WebSocket (version synchrone)
        
        Args:
            side: C√¥t√© de l'ordre (BUY/SELL) 
            quantity: Quantit√© ex√©cut√©e
            price: Prix d'ex√©cution
            order_id: ID de l'ordre ex√©cut√©
        """
        try:
            self.logger.info(f"üîÑ Traitement ex√©cution cascade WebSocket: {side} {quantity} @ {price}")
            
            # Retirer l'ordre de la liste pending
            self.pending_orders = [order for order in self.pending_orders if str(order.get("orderId", "")) != order_id]
            
            # Mettre √† jour les quantit√©s
            if side == "BUY":
                self.current_long_quantity += quantity
            else:
                self.current_short_quantity += quantity
            
            self.cascade_orders_count += 1
            
            # Mettre √† jour les TP
            if self.tp_service and config.TP_CONFIG["ENABLED"]:
                self._update_tp_after_cascade(side)
            
            # Cr√©er l'ordre cascade suivant si sous la limite
            if self.cascade_orders_count < config.CASCADE_CONFIG["MAX_ORDERS"]:
                self.logger.info("üîÑ Prochain ordre cascade sera cr√©√© lors de la prochaine bougie")
            else:
                self.logger.info("Limite d'ordres cascade atteinte")
                self.state = CascadeState.STOPPED
            
            self.logger.info(f"‚úÖ Cascade {side} trait√©e via WebSocket - Total ordres: {self.cascade_orders_count}")
            
        except Exception as e:
            self.logger.error(f"Erreur traitement cascade WebSocket: {e}", exc_info=True)
            
    async def _process_cascade_execution_async(self, side: str, quantity: float, price: float, order_id: str) -> None:
        """
        Traite l'ex√©cution d'un ordre cascade via WebSocket (version async)
        
        Args:
            side: C√¥t√© de l'ordre (BUY/SELL) 
            quantity: Quantit√© ex√©cut√©e
            price: Prix d'ex√©cution
            order_id: ID de l'ordre ex√©cut√©
        """
        try:
            self.logger.info(f"üîÑ Traitement ex√©cution cascade WebSocket ASYNC: {side} {quantity} @ {price}")
            
            # Retirer l'ordre de la liste pending
            self.pending_orders = [order for order in self.pending_orders if str(order.get("orderId", "")) != order_id]
            
            # Mettre √† jour les quantit√©s
            if side == "BUY":
                self.current_long_quantity += quantity
            else:
                self.current_short_quantity += quantity
            
            self.cascade_orders_count += 1
            
            # Mettre √† jour les TP
            if self.tp_service and config.TP_CONFIG["ENABLED"]:
                self._update_tp_after_cascade(side)
            
            # Cr√©er l'ordre cascade suivant si sous la limite
            if self.cascade_orders_count < config.CASCADE_CONFIG["MAX_ORDERS"]:
                self.logger.info("üîÑ Cr√©ation ordre cascade suivant...")
                await self._create_next_cascade_order()
            else:
                self.logger.info("Limite d'ordres cascade atteinte")
                self.state = CascadeState.STOPPED
            
            self.logger.info(f"‚úÖ Cascade {side} trait√©e via WebSocket ASYNC - Total ordres: {self.cascade_orders_count}")
            
        except Exception as e:
            self.logger.error(f"Erreur traitement cascade WebSocket ASYNC: {e}", exc_info=True)

    async def _process_hedge_execution_websocket(self, side: str, quantity: float, price: float) -> None:
        """
        Traite l'ex√©cution du hedge initial via WebSocket
        
        Args:
            side: C√¥t√© de l'ordre (BUY/SELL)
            quantity: Quantit√© ex√©cut√©e
            price: Prix d'ex√©cution
        """
        try:
            self.logger.info(f"üéØ Traitement ex√©cution hedge WebSocket: {side} {quantity} @ {price}")
            
            # Mettre √† jour les prix et quantit√©s
            if side == "BUY":
                self.initial_long_price = price
                self.current_long_quantity += quantity
            else:
                self.initial_short_price = price
                self.current_short_quantity += quantity
            
            # Cr√©er/mettre √† jour les TP pour hedge
            if self.tp_service and config.TP_CONFIG["ENABLED"]:
                self._create_tp_for_hedge_execution(side, quantity)
            
            # Passer en mode cascade active
            self.state = CascadeState.ACTIVE
            self.initial_hedge_order = None
            
            # Cr√©er le premier ordre cascade
            await self._create_next_cascade_order()
            
            self.logger.info(f"‚úÖ Hedge trait√© via WebSocket - Cascade active")
            
        except Exception as e:
            self.logger.error(f"Erreur traitement hedge WebSocket: {e}", exc_info=True)
    
    async def _process_cascade_execution_websocket(self, side: str, quantity: float, price: float, order_id: str) -> None:
        """
        Traite l'ex√©cution d'un ordre cascade via WebSocket
        
        Args:
            side: C√¥t√© de l'ordre (BUY/SELL) 
            quantity: Quantit√© ex√©cut√©e
            price: Prix d'ex√©cution
            order_id: ID de l'ordre ex√©cut√©
        """
        try:
            self.logger.info(f"üîÑ Traitement ex√©cution cascade WebSocket: {side} {quantity} @ {price}")
            
            # Retirer l'ordre de la liste pending
            self.pending_orders = [order for order in self.pending_orders if str(order.get("orderId", "")) != order_id]
            
            # Mettre √† jour les quantit√©s
            if side == "BUY":
                self.current_long_quantity += quantity
            else:
                self.current_short_quantity += quantity
            
            self.orders_executed_count += 1
            
            # Mettre √† jour les TP
            if self.tp_service and config.TP_CONFIG["ENABLED"]:
                self._update_tp_after_cascade(side)
            
            # Cr√©er l'ordre cascade suivant si sous la limite
            if self.orders_executed_count < config.CASCADE_CONFIG["MAX_ORDERS"]:
                await self._create_next_cascade_order()
            else:
                self.logger.info("Limite d'ordres cascade atteinte")
                self.state = CascadeState.STOPPED
            
            self.logger.info(f"‚úÖ Cascade {side} trait√©e via WebSocket - Total ordres: {self.orders_executed_count}")
            
        except Exception as e:
            self.logger.error(f"Erreur traitement cascade WebSocket: {e}", exc_info=True)
    
    def handle_tp_execution(self, executed_side: str) -> None:
        """
        G√®re l'ex√©cution d'un TP avec reset complet du syst√®me pour nouveau cycle
        
        Args:
            executed_side: C√¥t√© du TP ex√©cut√© ("LONG" ou "SHORT")
        """
        self.logger.debug(f"handle_tp_execution called: {executed_side}")
        self.logger.info(f"üéØ TP {executed_side} ex√©cut√© - D√©marrage du reset complet du syst√®me")
        
        try:
            # 1. Fermer TOUTES les positions ouvertes (pas seulement le c√¥t√© du TP ex√©cut√©)
            self._close_all_positions()
            
            # 2. Annuler TOUS les ordres en attente (LONG et SHORT)
            self._cancel_all_pending_orders()
            
            # 3. Annuler l'ordre hedge initial s'il existe encore
            if self.initial_hedge_order:
                hedge_order_id = self.initial_hedge_order.get("orderId")
                if hedge_order_id:
                    cancel_result = self.binance_client.cancel_order(config.SYMBOL, int(hedge_order_id))
                    if cancel_result:
                        self.logger.info(f"Ordre hedge initial {hedge_order_id} annul√©")
                    self.initial_hedge_order = None
            
            # 4. Reset complet des variables du syst√®me cascade
            self.current_long_quantity = 0.0
            self.current_short_quantity = 0.0
            self.initial_long_price = None
            self.initial_short_price = None
            self.pending_orders.clear()
            self.cascade_orders_count = 0
            
            # 5. Passer en √©tat STOPPED pour permettre nouveau signal
            self.state = CascadeState.STOPPED
            
            self.logger.info("‚úÖ Reset complet termin√© - Syst√®me pr√™t pour nouveau signal")
            
        except Exception as e:
            self.logger.error(f"Erreur lors du reset complet syst√®me: {e}", exc_info=True)
    
    def _close_all_positions(self) -> None:
        """
        Ferme toutes les positions ouvertes (LONG et SHORT) apr√®s v√©rification des positions r√©elles
        """
        self.logger.info("V√©rification et fermeture des positions r√©elles ouvertes")
        
        try:
            # R√©cup√©rer les positions r√©elles depuis Binance
            positions = self.binance_client.get_position_info(config.SYMBOL)
            if not positions:
                self.logger.warning("Impossible de r√©cup√©rer les positions - abandon fermeture")
                return
            
            # Parcourir les positions et fermer celles qui ont une quantit√© > 0
            for position in positions:
                position_side = position.get("positionSide", "")
                position_amt = float(position.get("positionAmt", "0"))
                
                # Ignorer les positions avec quantit√© nulle
                if abs(position_amt) == 0:
                    continue
                
                self.logger.info(f"Position {position_side} d√©tect√©e: {position_amt}")
                
                # D√©terminer l'ordre de fermeture
                if position_side == "LONG" and position_amt > 0:
                    side = "SELL"
                    quantity = position_amt
                elif position_side == "SHORT" and position_amt < 0:
                    side = "BUY"
                    quantity = abs(position_amt)  # Convertir en positif
                else:
                    continue
                
                # Formatter et placer l'ordre de fermeture
                formatted_quantity = self._format_cascade_quantity(quantity)
                if formatted_quantity:
                    order = self.binance_client.place_order(
                        symbol=config.SYMBOL,
                        side=side,
                        quantity=formatted_quantity,
                        order_type="MARKET",
                        position_side=position_side
                    )
                    if order:
                        self.logger.info(f"‚úÖ Position {position_side} ferm√©e: {formatted_quantity}")
                    else:
                        self.logger.error(f"‚ùå √âchec fermeture position {position_side}")
                else:
                    self.logger.error(f"Erreur formatage quantit√© {position_side}: {quantity}")
                    
        except Exception as e:
            self.logger.error(f"Erreur lors de la fermeture des positions: {e}", exc_info=True)
    
    def _cancel_all_pending_orders(self) -> None:
        """
        Annule tous les ordres en attente (LONG et SHORT)
        """
        self.logger.info(f"Annulation de tous les ordres en attente ({len(self.pending_orders)})")
        
        try:
            orders_to_cancel = self.pending_orders.copy()  # Copie pour √©viter modification pendant it√©ration
            
            for order in orders_to_cancel:
                order_id = order.get("orderId")
                if order_id:
                    cancel_result = self.binance_client.cancel_order(config.SYMBOL, int(order_id))
                    if cancel_result:
                        self.pending_orders.remove(order)
                        self.logger.info(f"Ordre cascade {order_id} annul√©")
                    else:
                        self.logger.warning(f"√âchec annulation ordre {order_id}")
                        
        except Exception as e:
            self.logger.error(f"Erreur lors de l'annulation des ordres: {e}", exc_info=True)
    
    def _cancel_pending_order(self, order: Dict[str, Any]) -> None:
        """
        Annule un ordre en attente
        
        Args:
            order: Ordre √† annuler
        """
        try:
            order_id = order.get("orderId")
            if order_id:
                cancel_result = self.binance_client.cancel_order(config.SYMBOL, int(order_id))
                if cancel_result:
                    self.pending_orders.remove(order)
                    self.logger.info(f"Ordre cascade {order_id} annul√© suite √† l'ex√©cution TP")
                else:
                    self.logger.warning(f"√âchec annulation ordre cascade {order_id}")
        except Exception as e:
            self.logger.error(f"Erreur annulation ordre cascade: {e}", exc_info=True)